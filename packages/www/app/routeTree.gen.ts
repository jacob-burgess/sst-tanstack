/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RedirectImport } from './routes/redirect'
import { Route as DeferredImport } from './routes/deferred'
import { Route as IndexImport } from './routes/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as EpisodesIndexImport } from './routes/episodes/index'
import { Route as EpisodesYoutubeIdImport } from './routes/episodes/$youtubeId'

// Create/Update Routes

const RedirectRoute = RedirectImport.update({
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SearchIndexRoute = SearchIndexImport.update({
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any)

const EpisodesIndexRoute = EpisodesIndexImport.update({
  path: '/episodes/',
  getParentRoute: () => rootRoute,
} as any)

const EpisodesYoutubeIdRoute = EpisodesYoutubeIdImport.update({
  path: '/episodes/$youtubeId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/episodes/$youtubeId': {
      id: '/episodes/$youtubeId'
      path: '/episodes/$youtubeId'
      fullPath: '/episodes/$youtubeId'
      preLoaderRoute: typeof EpisodesYoutubeIdImport
      parentRoute: typeof rootRoute
    }
    '/episodes/': {
      id: '/episodes/'
      path: '/episodes'
      fullPath: '/episodes'
      preLoaderRoute: typeof EpisodesIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/episodes/$youtubeId': typeof EpisodesYoutubeIdRoute
  '/episodes': typeof EpisodesIndexRoute
  '/search': typeof SearchIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/episodes/$youtubeId': typeof EpisodesYoutubeIdRoute
  '/episodes': typeof EpisodesIndexRoute
  '/search': typeof SearchIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/redirect': typeof RedirectRoute
  '/episodes/$youtubeId': typeof EpisodesYoutubeIdRoute
  '/episodes/': typeof EpisodesIndexRoute
  '/search/': typeof SearchIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/redirect'
    | '/episodes/$youtubeId'
    | '/episodes'
    | '/search'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/redirect'
    | '/episodes/$youtubeId'
    | '/episodes'
    | '/search'
  id:
    | '__root__'
    | '/'
    | '/deferred'
    | '/redirect'
    | '/episodes/$youtubeId'
    | '/episodes/'
    | '/search/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeferredRoute: typeof DeferredRoute
  RedirectRoute: typeof RedirectRoute
  EpisodesYoutubeIdRoute: typeof EpisodesYoutubeIdRoute
  EpisodesIndexRoute: typeof EpisodesIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeferredRoute: DeferredRoute,
  RedirectRoute: RedirectRoute,
  EpisodesYoutubeIdRoute: EpisodesYoutubeIdRoute,
  EpisodesIndexRoute: EpisodesIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/deferred",
        "/redirect",
        "/episodes/$youtubeId",
        "/episodes/",
        "/search/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/episodes/$youtubeId": {
      "filePath": "episodes/$youtubeId.tsx"
    },
    "/episodes/": {
      "filePath": "episodes/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
